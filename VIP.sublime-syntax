%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: VIP
file_extensions:
  - vip
  - vpp
  - vih
  - vil
  - obj
  - mnu
  - inc
  - gcd
scope: source.vip

variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'

contexts:
  main:
    - include: global

  global:
    - match: \b(?i:(global|exception|keepqueue|show|_doFinally|_except|_finally|_loop|_noExcept|_raise|_reRaise|_retry|_skipFinally|_try|absolute|abstract|acceptField|action|all|alter|alwaysOnTop|alwaysReturn|as|auto|backColor|begin|bevel|bitmap|blue|bold|bottom|bounds|break|browse|buttons|by|cacheable|cacheinfl|cartesian|case|cast|centered|center|checkEnter|color|command|condition|constructor|const|continue|count|create|current|cyan|default|delete|deprecated|desc|destructor|dialog|div|doAccept|do|else|embedded|endfields|endform|endvar|end|escClose|eventNavigation|exit|abort|extensionPoint|external|external|fastfirstrow|fieldName|fieldtitle|fields|fixed_x|fixed_y|font|forward|backward|for|free|from|fullcache|getFirst|getNext|getLast|gray|group|handleEvent|handlerwithreplace|handler|help|if|image|implementation|implements|index|inherited|insert|interface|internal|into|is|italic|journal|left|licensed|like|linkform|list|locallock|memoID|menuItem|menu|modifier|mod|nameInList|new|noAutoSize|noauto|nocached|nocacheinfl|nocache|noindex|noprotect|spinbutton|noTableNavigation|nullRef|null|objInterface|objRef|of|ole|onClose|onOpen|on|ordered|order|out|panel|DataStream|parameters|pickButton|nopickButton|property|protect|prototype|quickChoice|readonly|read|recMarker|recordExists|record|ref|reserved|restrict|result|right|rollback|root|screen|searchField|select|self|set|show|at|size|skip|static|nostatic|statusCtx|statusLine|stdcache|struct|surrogate|synonym|tabbedSheet|tablestruct|tableEvent|table|text|then|toolbar|top|tree|type|unique|update|userSc|viewField|viewTable|view|vipInterface|virtual|novisual|visual|web|where|while|window|with|write))\b
      scope: keyword.control.vip

    - match: \b((?<!\.)(?i:(var)))\b
      scope: keyword.control.vip

    - match: ^\s*(#(?i:(component|include|declare|doc|end|ifdef|endif|define|ifndef)))\b
      scope: keyword.control.vip

    - match: \b(?i:(function|procedure))\b\s+(\w+(\.\w+)?)(\(.*?\))?;\s*(?=(?i:attribute|forward|external))
      scope: meta.function.prototype.vip
      captures:
        1: storage.type.prototype.vip
        2: entity.name.function.prototype.vip

    - match: \b(?i:(function|procedure))\b\s+(\w+(\.\w+)?)
      scope: meta.function.vip
      captures:
        1: storage.type.function.vip
        2: entity.name.function.vip

    - match: '\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(h|b|H|B|L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b'
      scope: constant.numeric.vip

    - match: '(^[ \t]+)?(//)'
      captures:
        1: punctuation.whitespace.comment.leading.vip
        2: punctuation.definition.comment.vip
      push:
        - meta_scope: comment.line.double-slash.vip.two
        - match: \n
          pop: true

    - match: \/\*
      captures:
        0: punctuation.definition.comment.vip
      push:
        - meta_scope: comment.block.vip.one
        - match: \*\/
          captures:
            0: punctuation.definition.comment.vip
          pop: true

    - match: '"'
      comment: Double quoted strings are an extension and (generally) support C-style escape sequences.
      captures:
        0: punctuation.definition.string.begin.vip
      push:
        - meta_scope: string.quoted.double.vip
        - match: '"'
          captures:
            0: punctuation.definition.string.end.vip
          pop: true
        - match: \\.
          scope: constant.character.escape.vip

    - match: "'"
      captures:
        0: punctuation.definition.string.begin.vip
      push:
        - meta_scope: string.quoted.single.vip
        - match: "''"
          scope: constant.character.escape.apostrophe.vip
        - match: "'"
          captures:
            0: punctuation.definition.string.end.vip
          pop: true

    - match: '^\s*<<'
      captures:
        0: punctuation.definition.string.begin.vip
      push:
        - meta_scope: string.quoted.single.vip
        - match: '<<>>'
          scope: constant.character.escape.apostrophe.vip
        - match: '>>\s*$'
          captures:
            0: punctuation.definition.string.end.vip
          pop: true

    - match: '(\:\=|\+\=|\-\=|\*\=|\/\=|\|\=|\&\=)'
      scope: keyword.operator.assignment.vip

    - match: ((?<!\.)(\+|-|/|\*))
      scope: keyword.operator.arithmetic.vip

    - match: '\b(?i:(true|false|tsOk|cmYes|YesNo|Confirmation|Warning|OkButton))'
      scope: constant.language.vip

    - match: \b(?i:(ExprFieldValue|CurField|Target|CurTable))
      scope: variable.language.vip

    - match: (?:\w+)(?:\s*:\s*)(\w+\s*);
      captures:
        1: support.type.vip

    - match: (\b(?i:(s20|s50|s255|array|string|boolean|tPtr|tSumma|word|longint|integer|byte|comp|double|single|decimal|boolean|char|string|date|time|_DateTime|variant))\b(?!\())
      scope: storage.type.vip

    - match: <\=|>\=|\=|<|>|\!\=
      scope: keyword.operator.comparison.vip

    - match: '\b(?i:(and|or|xor|not))\b'
      scope: keyword.operator.word.vip

    - match: \;
      scope: punctuation.terminator.vip

    - match: (:|,)
      scope: punctuation.separator.vip

    - match: \b(?i:(public|private|event|protected|final))
      scope: storage.modifier.vip

    # TODO
    # variable.function.vip


